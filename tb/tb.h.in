//========================================================================== //
// Copyright (c) 2020, Stephen Henry
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//========================================================================== //

#ifndef QS_TB_TB_H
#define QS_TB_TB_H

#include "verilated.h"
#include <vector>
#include <deque>
#include <string>
#include <ostream>

// Enable waveform dumping.
#cmakedefine OPT_VCD_ENABLE

// Enable tracing to log file.
#cmakedefine OPT_TRACE_ENABLE

// Verbose logging
#cmakedefine OPT_VERBOSE

// Forwards:
class Vtb_qs;

namespace tb {

class TB;

constexpr std::size_t OPT_N = ${OPT_N};

constexpr std::size_t OPT_W = ${OPT_W};

constexpr std::size_t OPT_BANKS_N = ${OPT_BANKS_N};

using word_type = vluint32_t;

std::ostream& operator<<(std::ostream& os, const std::vector<word_type>& dp);

struct VSignals {

  struct VIn {
    vluint8_t vld;
    vluint8_t sop;
    vluint8_t eop;
    vluint32_t dat;
  };

  struct VOut {
    vluint8_t vld;
    vluint8_t sop;
    vluint8_t eop;
    vluint32_t dat;
  };

  struct UCInst {
    bool commit;
    vluint16_t inst;
    vluint8_t pc;
  };

  struct UCWriteback {
    bool wen;
    vluint8_t wa;
    vluint32_t wdata;

    bool flags_en;
    bool c;
    bool n;
    bool z;
  };
  
  template<typename U>
  static VSignals bind(U* u) {
    VSignals vs;
    // Unsorted In:
    vs.in_vld_ = std::addressof(u->in_vld);
    vs.in_sop_ = std::addressof(u->in_sop);
    vs.in_eop_ = std::addressof(u->in_eop);
    vs.in_dat_ = std::addressof(u->in_dat);
    vs.in_rdy_r_ = std::addressof(u->in_rdy_r);
    // Sorted out:
    vs.out_vld_r_ = std::addressof(u->out_vld_r);
    vs.out_sop_r_ = std::addressof(u->out_sop_r);
    vs.out_eop_r_ = std::addressof(u->out_eop_r);
    vs.out_dat_r_ = std::addressof(u->out_dat_r);
    // Disassembly interface:
    vs.uc_inst_commit_ = std::addressof(u->uc_inst_commit);
    vs.uc_inst_ = std::addressof(u->uc_inst);
    vs.uc_inst_pc_ = std::addressof(u->uc_inst_pc);
    // Writeback interface
    vs.uc_rf_wen_ = std::addressof(u->uc_rf_wen);
    vs.uc_rf_wa_ = std::addressof(u->uc_rf_wa);
    vs.uc_rf_wdata_ = std::addressof(u->uc_rf_wdata);
    vs.uc_flags_c_ = std::addressof(u->uc_flags_c);
    vs.uc_flags_n_ = std::addressof(u->uc_flags_n);
    vs.uc_flags_z_ = std::addressof(u->uc_flags_z);
    // Testbench monitors:
    vs.tb_cycle_ = std::addressof(u->tb_cycle);
    // Clk/Rst:
    vs.rst_ = std::addressof(u->rst);
    vs.clk_ = std::addressof(u->clk);

    return vs;
  }

  // Set unsorted input interface.
  void set(const VIn& in) const;

  // Set value of clk port.
  void set_clk(bool clk = true);

  // Set value of rst port.
  void set_rst(bool rst = true);

  // Get current value of rst port.
  bool get_rst() const;

  // Sample 'in_rdy_r' port.
  bool in_rdy_r() const;

  // Sample sorted output interface.
  void get(VOut& out) const;

  // Get microcode instruction packet.
  void get(UCInst& inst) const;

  // Get microcode writeback packet
  void get(UCWriteback& wrbk) const;

  // Obtain current simulation cycle.
  vluint64_t cycle() const;
  
 private:
  // Unsorted in:
  vluint8_t* in_vld_;
  vluint8_t* in_sop_;
  vluint8_t* in_eop_;
  vluint32_t* in_dat_;
  vluint8_t* in_rdy_r_;

  // Sorted out:
  vluint8_t* out_vld_r_;
  vluint8_t* out_sop_r_;
  vluint8_t* out_eop_r_;
  vluint32_t* out_dat_r_;

  // Disassembly interface
  vluint8_t* uc_inst_commit_;
  vluint16_t* uc_inst_;
  vluint8_t* uc_inst_pc_;

  // Writeback interface
  vluint8_t* uc_rf_wen_;
  vluint8_t* uc_rf_wa_;
  vluint32_t* uc_rf_wdata_;
  vluint8_t* uc_flags_en_;
  vluint8_t* uc_flags_c_;
  vluint8_t* uc_flags_n_;
  vluint8_t* uc_flags_z_;

  // Testbench monitor
  vluint64_t* tb_cycle_;

  // Clk/Rst
  vluint8_t* rst_;
  vluint8_t* clk_;
};

class Model {
 public:
  Model() = default;

  Model(TB* tb);

  // Reset the architectural stae of the model.
  void reset();

  // Advance the model by one cycle.
  void step();

  // Set architectural state not visible to the microcode.
  void set_special_register(vluint8_t i, vluint32_t v);

  // Set memory dimensions
  void set_memory_dims(std::size_t lo, std::size_t hi);

  // Set initial memory state.
  void set_memory(std::size_t i, vluint32_t word);

 private:

  // The machines architectural state (predicted)
  struct Arch {
    // Set initial architectural state.
    void reset();
    
    // Current program counter
    vluint16_t pc;

    // Special registers
    vluint32_t N;

    // Architectural flags
    bool z, c, n;

    // Pop value from the top of the stack.
    vluint32_t stack_pop();

    // Push value into the stack.
    void stack_push(vluint32_t d);

    // Write 'd' to memory location 'a'.
    void mem_write(vluint8_t a, vluint32_t d);

    void mem_resize(std::size_t n);

    // Read address 'a' from memory.
    vluint32_t mem_read(vluint8_t a);

    vluint32_t rf_read(vluint8_t a);

    void rf_write(vluint8_t a, vluint32_t d);

   private:
    // Machine register file.
    vluint32_t rf [8];
    
    // Stack model.
    std::vector<vluint32_t> stack;

    // Memory model
    std::vector<vluint32_t> mem;
  };

  Arch arch_;
  
  // Model is bound to an RTL instance.
  bool is_valid_ = false;

  // Verilated interface
  VSignals vs_;

  // Testbench instance.
  TB* tb_ = nullptr;
};

struct Options {
  // Enable waveform dumping
  bool wave_enable = false;

  // Waveform dumpfile (when enabled).
  std::string wave_name = "sim.vcd";

  // Enable log tracing.
  bool trace_enable = false;
};

class TB {
  friend class Model;

 public:
  // Constructor
  TB(const Options& opts = Options{});

  // Destructor
  ~TB();

  // Current simulation time
  vluint64_t time() const { return time_; }

  // Current simulation cycle
  vluint64_t cycle() const { return cycle_; }

  void push_back(const std::vector<word_type>& pkt);

  // Run simulation.
  void run();

 private:
#ifdef OPT_TRACE_ENABLE

  // Return log output stream.
  std::ostream& log() const;
#endif

  // Invoke reset sequence on RTL.
  void reset();

  // Drive stimulus into test bench
  void drive_stimulus(const std::vector<word_type>& stimulus);

  // Obtain sorted output.
  std::vector<word_type> get_sorted_packet();

  // Advance RTL by one clock cycle.
  void step(std::size_t n = 1);

  // Verilated interface
  VSignals vs_;
  
#ifdef OPT_VCD_ENABLE
  // VCD instance.
  VerilatedVcdC* wave_ = nullptr;
#endif

  // Verilated RTL instance.
  Vtb_qs* u_ = nullptr;

  // DataPackets to be issued to the RTL.
  std::deque<std::vector<word_type> > pkts_;

  // Current execution time.
  vluint64_t time_;

  // Current operationg cycle.
  vluint64_t cycle_;

  // Behavioral model of sorter.
  Model model_;

  // Testbench options
  Options opts_;
};

} // namespace tb

#endif

